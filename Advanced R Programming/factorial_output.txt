# factorial_output.txt

Benchmarking Results for Factorial Functions

Unit: microseconds
        expr     min       lq      mean   median       uq      max neval
        loop   1.401   1.6515  37.18200   2.2010   2.5510 3454.101   100
      reduce 201.101 205.0005 285.87298 208.7005 217.0010 4385.401   100
   recursive   4.401   5.1005  39.14595   5.5010   5.9515 3347.100   100
 memoization   4.102   4.4510   6.77903   5.5005   6.2010  101.501   100

Discussion:
1. **Factorial_loop** and **Factorial_mem** are generally the fastest, likely due to their simplicity and efficient handling of repeated computations.
2. **Factorial_reduce** is slower, possibly due to the overhead of the purrr package's reduce function.
3. **Factorial_func**, the recursive version, performs well for small inputs but can suffer from stack overflow errors or inefficiency for larger inputs due to the depth of recursion.
4. **Factorial_mem** leverages memoization, providing efficient computation by storing previously computed results, especially useful for larger inputs.

Further tests should involve a range of input sizes to see how the performance of these functions scales with larger values of n.
